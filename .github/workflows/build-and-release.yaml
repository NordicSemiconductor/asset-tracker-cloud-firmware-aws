name: Build and Release

on:
  push:
    paths:
      - "**.c"
      - "**.h"
      - "**.feature"
      - "Kconfig"
      - ".github/workflows/build-and-release.yaml"
      - "Dockerfile"
      - "west.yml"
      - "*.conf"
  repository_dispatch:
    types:
      - source-update
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CR_PAT: ${{ secrets.CR_PAT }}

jobs:
  broker:
    name: Determine broker hostname

    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Determine the AWS IoT broker hostname

        run: |
          BROKER_HOSTNAME=`AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} AWS_DEFAULT_REGION=${{ env.AWS_REGION }} aws iot describe-endpoint --endpoint-type iot:Data-ATS | jq '.endpointAddress' -r | tr -d '\n'`
          echo ${BROKER_HOSTNAME}
          if [ -z "$BROKER_HOSTNAME" ]; then echo "Failed to discover broker hostname."; exit 1; fi
          echo ${BROKER_HOSTNAME} > broker.conf

      - uses: actions/upload-artifact@v2
        with:
          name: broker
          path: broker.conf

  docker:
    name: Prepare Docker image
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.docker-image-tag.outputs.docker_image }}
    env:
      SUPL_CLIENT_LIB_DOWNLOAD: ${{ secrets.SUPL_CLIENT_LIB_DOWNLOAD }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Determine Docker image name and tag
        id: docker-image-tag
        run: |
          DOCKER_REPO_NAME=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]'`
          cat Dockerfile west.yml > .docker-checksum
          echo $SUPL_CLIENT_LIB_DOWNLOAD >> .docker-checksum
          DOCKER_CHECKSUM=`sha256sum .docker-checksum | awk '{ print $1 }' | tr -d '\n'`
          DOCKER_IMAGE=ghcr.io/${DOCKER_REPO_NAME}-builder:${DOCKER_CHECKSUM}
          echo "::set-output name=docker_image::${DOCKER_IMAGE}"
          echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV

      - name: Check if Docker image exists
        id: check-docker-image
        continue-on-error: true
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: docker manifest inspect ${{ env.DOCKER_IMAGE }}

      - name: Build Docker image
        if: steps.check-docker-image.outcome == 'failure'
        uses: docker/build-push-action@v2
        with:
          build-args: |
            SUPL_CLIENT_LIB_DOWNLOAD
          context: .
          tags: ${{ env.DOCKER_IMAGE }}
          push: true

  build:
    runs-on: ubuntu-latest

    needs: [broker, docker]

    strategy:
      matrix:
        board: [thingy91_nrf9160ns, nrf9160dk_nrf9160ns]
        network: [nbiot, ltem]
        loglevel: [debug, nodebug]

    env:
      SUPL_CLIENT_LIB_DOWNLOAD: ${{ secrets.SUPL_CLIENT_LIB_DOWNLOAD }}

    steps:
      - uses: actions/checkout@v2

      - name: Determine next release version
        uses: nordicsemiconductor/cloud-get-next-version-action@saga
        id: version
        with:
          branch: saga
          defaultVersion: "0.0.0-development"

      - name: Configure Version
        run: |
          APP_VERSION=${{ steps.version.outputs.nextRelease }}-${{ matrix.board }}-${{ matrix.network }}-${{ matrix.loglevel }}
          echo "CONFIG_ASSET_TRACKER_V2_APP_VERSION=\"${APP_VERSION}\"" >> prj.conf

      - name: Enable debug logs
        if: matrix.loglevel == 'debug'
        run: echo "CONFIG_LOG_MAX_LEVEL=4" >> prj.conf

      - name: Set network mode to NB-IoT
        if: matrix.network == 'nbiot'
        run: |
          sed -i s/CONFIG_LTE_NETWORK_MODE_LTE_M_GPS=y/CONFIG_LTE_NETWORK_MODE_LTE_M_GPS=n/ prj.conf
          echo "CONFIG_LTE_NETWORK_MODE_NBIOT_GPS=y" >> prj.conf

      - uses: actions/download-artifact@v2
        with:
          name: broker

      - name: Configure the AWS IoT broker hostname
        run: |
          BROKER_HOSTNAME=`cat broker.conf`
          echo "CONFIG_AWS_IOT_BROKER_HOST_NAME=\"${BROKER_HOSTNAME}\"" >> prj.conf

      - name: Enable SUPL client
        if: env.SUPL_CLIENT_LIB_DOWNLOAD != ''
        run: |
          echo "CONFIG_SUPL_CLIENT_LIB=y" >> prj.conf
          echo "CONFIG_AGPS=y" >> prj.conf
          echo "CONFIG_AGPS_SRC_SUPL=y" >> prj.conf
          echo "CONFIG_FPU=y" >> prj.conf

      - run: cat prj.conf

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Pull Docker image
        run: docker pull ${{ needs.docker.outputs.docker_image }}

      - name: Build with debug enabled
        if: matrix.loglevel == 'debug'
        run: |
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ${{ needs.docker.outputs.docker_image }} /bin/bash -c 'cd ncs/firmware && west update && west build -p always -b ${{ matrix.board }} -- -DOVERLAY_CONFIG="overlay-debug.conf;asset-tracker-cloud-firmware-aws.conf" -DEXTRA_CFLAGS="-Werror=format-truncation"'

      - name: Build with debug disabled
        if: matrix.loglevel != 'debug'
        run: |
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ${{ needs.docker.outputs.docker_image }} /bin/bash -c 'cd ncs/firmware && west update && west build -p always -b ${{ matrix.board }} -- -DOVERLAY_CONFIG=asset-tracker-cloud-firmware-aws.conf  -DEXTRA_CFLAGS="-Werror=format-truncation"'

      - name: Copy firmware
        run: |
          cp build/zephyr/merged.hex ./
          cp build/zephyr/app_update.bin ./

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.board }}-${{ matrix.network }}-${{ matrix.loglevel }}
          path: |
            merged.hex
            app_update.bin
            prj.conf

  release:
    name: Release
    runs-on: ubuntu-latest
    if:
      github.ref == 'refs/heads/saga' && (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' || github.event_name ==
      'repository_dispatch')

    needs: [build]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - run: npx semantic-release
