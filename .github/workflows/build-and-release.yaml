name: Build and Release

on:
  push:
    paths:
      - "**.c"
      - "**.h"
      - "**.feature"
      - Kconfig
      - .github/workflows/build-and-release.yaml
      - Dockerfile
      - west.yml
      - "*.conf"
  repository_dispatch:
    types:
      - source-update

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CR_PAT: ${{ secrets.CR_PAT }}

jobs:
  broker:
    name: Determine broker hostname

    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Determine the AWS IoT broker hostname

        run: |
          BROKER_HOSTNAME=`AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} AWS_DEFAULT_REGION=${{ env.AWS_REGION }} aws iot describe-endpoint --endpoint-type iot:Data-ATS | jq '.endpointAddress' -r | tr -d '\n'`
          echo ${BROKER_HOSTNAME}
          if [ -z "$BROKER_HOSTNAME" ]; then echo "Failed to discover broker hostname."; exit 1; fi
          echo ${BROKER_HOSTNAME} > broker.conf

      - uses: actions/upload-artifact@v2
        with:
          name: broker
          path: broker.conf

  docker:
    name: Prepare Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Determine GitHub Container Registry repo name
        run: |
          DOCKER_REPO_NAME=`echo ${{ github.event.repository.full_name }} | tr '[:upper:]' '[:lower:]'`
          echo "DOCKER_REPO_NAME=${DOCKER_REPO_NAME}" >> $GITHUB_ENV
          echo ${DOCKER_REPO_NAME} > docker_repo_name.conf

      - name: Determine checksum for Docker image
        run: |
          DOCKER_CHECKSUM=`cat Dockerfile west.yml | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          echo "DOCKER_CHECKSUM=${DOCKER_CHECKSUM}" >> $GITHUB_ENV

      - name: Sign in to the GitHub Container Registry
        run: echo ${CR_PAT} | docker login ghcr.io -u USERNAME --password-stdin

      - name: Check if Docker image exists
        id: check-docker-image
        continue-on-error: true
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run:
          docker manifest inspect ghcr.io/${{ env.DOCKER_REPO_NAME
          }}-builder:${{ env.DOCKER_CHECKSUM }}

      - name: Build Docker image
        if: steps.check-docker-image.outcome == 'failure'
        run: docker build -t asset-tracker-firmware-docker .

      - name: Tag Docker image
        if: steps.check-docker-image.outcome == 'failure'
        run: |
          CHECKSUM=`cat Dockerfile west.yml | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          docker tag asset-tracker-firmware-docker ghcr.io/${{ env.DOCKER_REPO_NAME }}-builder:${{ env.DOCKER_CHECKSUM }}

      - name: Publish Docker image
        if: steps.check-docker-image.outcome == 'failure'
        run: |
          docker images
          docker push ghcr.io/${{ env.DOCKER_REPO_NAME }}-builder:${{ env.DOCKER_CHECKSUM }}

  build:
    runs-on: ubuntu-latest

    needs: [broker, docker]

    strategy:
      matrix:
        board: [thingy91_nrf9160ns, nrf9160dk_nrf9160ns]
        network: [nbiot, ltem]
        loglevel: [debug, nodebug]

    steps:
      - uses: actions/checkout@v2

      - name: Configure Version
        run: |
          APP_VERSION=${{ github.sha }}-${{ matrix.board }}-${{ matrix.network }}-${{ matrix.loglevel }}
          echo "CONFIG_ASSET_TRACKER_V2_APP_VERSION=\"${APP_VERSION}\"" >> prj_${{ matrix.board }}.conf

      - name: Enable debug logs
        if: matrix.loglevel == 'debug'
        run: echo "CONFIG_LOG_MAX_LEVEL=4" >> prj_${{ matrix.board }}.conf

      - name: Set network mode to LTE-m
        if: matrix.network == 'ltem'
        run: |
          sed -i s/CONFIG_LTE_NETWORK_MODE_NBIOT_GPS=y/CONFIG_LTE_NETWORK_MODE_LTE_M_GPS=y/ prj_${{ matrix.board }}.conf

      - name: Enable long download URLS for FOTA
        run: |
          echo "CONFIG_DOWNLOAD_CLIENT_MAX_HOSTNAME_SIZE=255" >> prj_${{ matrix.board }}.conf
          echo "CONFIG_DOWNLOAD_CLIENT_MAX_FILENAME_SIZE=255" >> prj_${{ matrix.board }}.conf

      - uses: actions/download-artifact@v2
        with:
          name: broker

      - name: Configure the AWS IoT broker hostname
        run: |
          BROKER_HOSTNAME=`cat broker.conf`
          echo "CONFIG_AWS_IOT_BROKER_HOST_NAME=\"${BROKER_HOSTNAME}\"" >> prj_${{ matrix.board }}.conf

      - run: cat prj_${{ matrix.board }}.conf

      - name: Determine checksum for Docker image
        run: |
          DOCKER_CHECKSUM=`cat Dockerfile west.yml | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          echo "DOCKER_CHECKSUM=${DOCKER_CHECKSUM}" >> $GITHUB_ENV

      - name: Determine GitHub Container Registry repo name
        run: |
          DOCKER_REPO_NAME=`echo ${{ github.event.repository.full_name }} | tr '[:upper:]' '[:lower:]'`
          echo "DOCKER_REPO_NAME=${DOCKER_REPO_NAME}" >> $GITHUB_ENV
          echo ${DOCKER_REPO_NAME} > docker_repo_name.conf

      - name: Sign in to the GitHub Container Registry
        run: echo ${CR_PAT} | docker login ghcr.io -u USERNAME --password-stdin

      - run:
          docker pull ghcr.io/${{ env.DOCKER_REPO_NAME }}-builder:${{
          env.DOCKER_CHECKSUM }}

      - name: Build with debug enabled
        if: matrix.loglevel == 'debug'
        run: |
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ghcr.io/${{ env.DOCKER_REPO_NAME }}-builder:${{ env.DOCKER_CHECKSUM }} /bin/bash -c 'cd ncs/firmware && west build -p always -b ${{ matrix.board }} -- -DOVERLAY_CONFIG=overlay-debug.conf'

      - name: Build with debug disabled
        if: matrix.loglevel != 'debug'
        run: |
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ghcr.io/${{ env.DOCKER_REPO_NAME }}-builder:${{ env.DOCKER_CHECKSUM }} /bin/bash -c 'cd ncs/firmware && west build -p always -b ${{ matrix.board }}'

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.board }}-${{ matrix.network }}-${{ matrix.loglevel }}
          path: |
            build/zephyr/merged.hex
            build/zephyr/app_update.bin

  e2e-aws:
    name: End to End tests (AWS)
    runs-on: ubuntu-latest

    needs: [broker, docker]

    strategy:
      matrix:
        board: [nrf9160dk_nrf9160ns]
        network: [ltem]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      STACK_NAME: ${{ secrets.STACK_NAME }}
      DEVICE_ID: ${{ secrets.DEVICE_ID }}
      CI: 1
      FORCE_COLOR: 3

    steps:
      - uses: actions/checkout@v2

      - name: Generate Job ID
        run: |
          JOB_ID=`uuidgen`
          echo "JOB_ID=${JOB_ID}" >> $GITHUB_ENV

      - name: Configure Version
        run: |
          APP_VERSION=${{ github.sha }}-${{ matrix.board }}-${{ matrix.network }}-${JOB_ID}
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
          echo "CONFIG_ASSET_TRACKER_V2_APP_VERSION=\"${APP_VERSION}-original\"" >> prj_${{ matrix.board }}.conf

      - name: Enable long download URLS for FOTA
        run: |
          echo "CONFIG_DOWNLOAD_CLIENT_MAX_HOSTNAME_SIZE=255" >> prj_${{ matrix.board }}.conf
          echo "CONFIG_DOWNLOAD_CLIENT_MAX_FILENAME_SIZE=255" >> prj_${{ matrix.board }}.conf

      - run: echo "# Firmware CI settings" >> prj_${{ matrix.board }}.conf

      - name: Enable debug logs
        run: echo "CONFIG_LOG_MAX_LEVEL=4" >> prj_${{ matrix.board }}.conf

      - name: Set network mode to LTE-m
        run: |
          sed -i s/CONFIG_LTE_NETWORK_MODE_NBIOT_GPS=y/CONFIG_LTE_NETWORK_MODE_LTE_M_GPS=y/ prj_${{ matrix.board }}.conf

      - uses: actions/download-artifact@v2
        with:
          name: broker

      - name: Cache AWS CLI
        id: cache-aws-cli
        uses: actions/cache@v2
        with:
          path: aws/
          key: ${{ runner.OS }}-cache-aws-cli

      - name: Install AWS
        if: steps.cache-aws-cli.outputs.cache-hit != 'true'
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Configure the AWS IoT broker hostname
        run: |
          BROKER_HOSTNAME=`cat broker.conf`
          echo "BROKER_HOSTNAME=${BROKER_HOSTNAME}" >> $GITHUB_ENV
          echo "CONFIG_AWS_IOT_BROKER_HOST_NAME=\"${BROKER_HOSTNAME}\"" >> prj_${{ matrix.board }}.conf

      - name: Set MQTT client ID to test device
        run: |
          echo "CONFIG_CLOUD_CLIENT_ID_USE_CUSTOM=y" >> prj_${{ matrix.board }}.conf
          echo "CONFIG_AWS_IOT_CLIENT_ID_MAX_LEN=40" >> prj_${{ matrix.board }}.conf
          echo "CONFIG_CLOUD_CLIENT_ID=\"${JOB_ID}\"" >> prj_${{ matrix.board }}.conf

      - run: cat prj_${{ matrix.board }}.conf

      - name: Determine GitHub Container Registry repo name
        run: |
          DOCKER_REPO_NAME=`echo ${{ github.event.repository.full_name }} | tr '[:upper:]' '[:lower:]'`
          echo "DOCKER_REPO_NAME=${DOCKER_REPO_NAME}" >> $GITHUB_ENV
          echo ${DOCKER_REPO_NAME} > docker_repo_name.conf

      - name: Determine checksum for Docker image
        run: |
          DOCKER_CHECKSUM=`cat Dockerfile west.yml | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          echo "DOCKER_CHECKSUM=${DOCKER_CHECKSUM}" >> $GITHUB_ENV

      - name: Sign in to the GitHub Container Registry
        run: echo ${CR_PAT} | docker login ghcr.io -u USERNAME --password-stdin

      - run:
          docker pull ghcr.io/${{ env.DOCKER_REPO_NAME }}-builder:${{
          env.DOCKER_CHECKSUM }}

      - name: Build
        run: |
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ghcr.io/${{ env.DOCKER_REPO_NAME }}-builder:${{ env.DOCKER_CHECKSUM }} /bin/bash -c 'cd ncs/firmware && west build -p always -b ${{ matrix.board }} -- -DOVERLAY_CONFIG=overlay-debug.conf'
          cp build/zephyr/merged.hex firmware.hex
          cp prj_${{ matrix.board }}.conf firmware.conf

      - name: Build with changed version for FOTA test
        run: |
          echo "CONFIG_ASSET_TRACKER_V2_APP_VERSION=\"${APP_VERSION}-upgraded\"" >> prj_${{ matrix.board }}.conf
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ghcr.io/${{ env.DOCKER_REPO_NAME }}-builder:${{ env.DOCKER_CHECKSUM }} /bin/bash -c 'cd ncs/firmware && west build -p always -b ${{ matrix.board }} -- -DOVERLAY_CONFIG=overlay-debug.conf'
          cp build/zephyr/app_update.bin fota-upgrade.bin
          cp prj_${{ matrix.board }}.conf fota-upgrade.conf

      - name: Keep certificates around
        uses: actions/cache@v2
        with:
          path: ./certificates
          key: certificates-2020-01-20

      - name: Schedule Firmware CI job
        uses: NordicSemiconductor/cloud-aws-firmware-ci-schedule-action@saga
        id: schedule
        with:
          job id: ${{ env.JOB_ID }}
          app version: ${{ env.APP_VERSION }}
          aws access key id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws secret access key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws region: ${{ secrets.AWS_REGION }}
          broker hostname: ${{ env.BROKER_HOSTNAME }}
          stack name: ${{ secrets.STACK_NAME }}
          firmware ci device id: ${{ secrets.DEVICE_ID }}
          hex file: firmware.hex
          fota file: fota-upgrade.bin
          abort on: |
            aws_fota: Error (-7) when trying to start firmware download
          end on: |
            "aws_iot_integration.cloud_wrap_init:  Version:     ${{ env.APP_VERSION }}-upgraded"
            "\"appV\""
            "\"${{ env.APP_VERSION }}-upgraded\""
            cloud_module.data_send: Data sent
          timeout in minutes: 20

      - name: Run feature tests
        uses: NordicSemiconductor/cloud-aws-firmware-ci-feature-runner-action@saga
        # For now, ignore test failures until we get more experience running these tests
        continue-on-error: true
        with:
          job id: ${{ env.JOB_ID }}
          app version: ${{ env.APP_VERSION }}
          aws access key id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws secret access key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws region: ${{ secrets.AWS_REGION }}
          broker hostname: ${{ env.BROKER_HOSTNAME }}
          stack name: ${{ secrets.STACK_NAME }}
          feature dir: features

      - name: Remove test device
        # If the device did not connect, no Thing will have been created
        if:
          steps.schedule.outputs.connected == 'true' &&
          !contains(toJSON(github.event.commits.*.message), '[skip-cleanup]')
        run: |
          CERT_ARN=`aws iot list-thing-principals --thing-name ${{ env.JOB_ID }} | jq -r '.principals[0]'`
          CERT_ID=`echo $CERT_ARN | cut -d'/' -f2`
          aws iot detach-thing-principal --thing-name ${{ env.JOB_ID }} --principal $CERT_ARN
          aws iot update-certificate --certificate-id $CERT_ID --new-status INACTIVE
          aws iot delete-certificate --certificate-id $CERT_ID
          aws iot delete-thing --thing-name ${{ env.JOB_ID }}

      - uses: actions/upload-artifact@v2
        with:
          name: end-to-end-test
          path: |
            firmware.hex
            firmware.conf
            fota-upgrade.bin
            fota-upgrade.conf
            certificates/*/device-${JOB_ID}*
            fotaJobDocument.json
            jobDocument.json
            report.json

      - name: Remove device certificates
        run: rm -v ./certificates/*/device-*

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    needs: [build, e2e-aws]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - run: npx semantic-release
